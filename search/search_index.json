{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#time-series-extraction-for-polygonal-data","title":"Time Series Extraction for Polygonal Data","text":""},{"location":"#name","title":"Name","text":"<ul> <li>T(h)eroPoDa + - Time Series Extraction for Polygonal Data and Trend Analysis \u2b1b</li> </ul>"},{"location":"#description","title":"Description","text":"<ul> <li>Toolkit created to extract Time Series information from Sentinel 2 \ud83d\udef0 data stored in Earth Engine, gap filling and trend analysis </li> </ul>"},{"location":"#author","title":"Author","text":"<ul> <li>Vin\u00edcius Vieira Mesquita - vinicius.mesquita@ufg.br (Main Theropoda)</li> </ul>"},{"location":"#co-author","title":"Co-author","text":"<ul> <li>Leandro Leal Parente - leal.parente@gmail.com (Gap Filling and Trend Analysis implementation)</li> </ul>"},{"location":"#version","title":"Version","text":"<ul> <li>1.1.0</li> </ul>"},{"location":"#how-to-use","title":"How to use","text":"<ul> <li>At this version of TheroPoDa (1.1.0), you could extract a series of NDVI data from Sentinel 2 for a Feature Collection of polygons simplily by adjusting some variables at the end of code:</li> </ul> variable usage example asset Choosed Earth Engine Vector Asset users/vieiramesquita/LAPIG_FieldSamples/lapig_goias_fieldwork_2022_50m id_field Vector column used as ID (use unique identifiers!) ID_POINTS output_name Output filename LAPIG_Pasture_S2_NDVI_Monitoring_FieldWork.csv"},{"location":"#roadmap","title":"Roadmap","text":"<ul> <li>Implement arguments to choose other zonal reducers (i.e. percentile, variance, etc.)</li> <li>Implement arguments to choose other satellite data series (i.e. Landsat series, MODIS products)</li> <li>Implement a visualization of the processed data (or samples of it)</li> </ul>"},{"location":"theropoda/","title":"Theropoda Module","text":"<p>This module includes functionalities related to <code>theropoda.py</code> code.</p>"},{"location":"theropoda/#overview","title":"Overview","text":"<p>The <code>theropoda.py</code> module provides functions to extract time series information from Sentinel 2 data stored in Earth Engine.</p>"},{"location":"theropoda/#attributes","title":"Attributes","text":"<ul> <li><code>asset</code> (str): Choosed Earth Engine vector asset.</li> <li><code>id_field</code> (str): Vector column used as ID (use unique identifiers!).</li> <li><code>output_name</code> (str): Output filename.</li> </ul>"},{"location":"theropoda/#example-usage","title":"Example Usage","text":"<pre><code>asset   = 'users/vieiramesquita/LAPIG_FieldSamples/lapig_goias_fieldwork_2022_50m'\nid_field = 'ID_POINTS'\noutput_name = 'LAPIG_Pasture_S2_NDVI_Monitoring_FieldWork.csv'\n</code></pre>"},{"location":"theropoda/#functions","title":"Functions","text":""},{"location":"theropoda/#1gettimeseries","title":"1.<code>getTimeSeries</code>","text":"<p>This function is responsible to get the time series of Sentinel 2 data throught Earth Engine. It needs a <code>geometry</code> object in the <code>ee.Feature()</code> formart and the choosed vector propertie ID as the <code>id_field</code>.</p>"},{"location":"theropoda/#parameters","title":"Parameters","text":"<ul> <li><code>geometry</code>: An ee.Feature() object representing the area of interest.</li> <li><code>bestEffort</code>: A boolean indicating whether to use a larger pixel (10m to 30m) if the polygon area is too big (default is False).</li> </ul>"},{"location":"theropoda/#returns","title":"Returns","text":"<ul> <li>NDVI time series data along with other information for the specified geometry.</li> </ul>"},{"location":"theropoda/#2build_time_series","title":"2.<code>build_time_series</code>","text":"<p>Builds and writes NDVI time series data for a target vector asset, processing one polygon at a time.</p>"},{"location":"theropoda/#parameters_1","title":"Parameters","text":"<ul> <li><code>index</code>: Index of the object being processed.</li> <li><code>obj</code>: Object ID for which the time series is being generated.</li> <li><code>id_field</code>: Field name representing the ID in the vector asset.</li> <li><code>outfile</code>: Output file path to write the time series data.</li> <li><code>asset</code>: Earth Engine vector asset.</li> <li><code>bestEffort</code>: A boolean indicating whether to use a larger scale if needed (default is False).</li> </ul>"},{"location":"theropoda/#returns_1","title":"Returns","text":"<ul> <li>True if processing is successful, None if the polygon area is too small, False if an error occurs during processing and restart the process using the bestEffort approach.</li> </ul>"},{"location":"theropoda/#3build_time_series_check","title":"3.<code>build_time_series_check</code>","text":"<p>Checks the consistency of the NDVI time series library and handles errors during processing.</p> <p>Parameters:   - <code>index</code>: Index of the object being processed.   - <code>obj</code>: Object ID for which the time series is being checked.   - <code>id_field</code>: Field name representing the ID in the vector asset.   - <code>outfile</code>: Output file path where time series data is stored.   - <code>asset</code>: Earth Engine vector asset.   - <code>checker</code>: A boolean indicating whether to check if the polygon has been processed before (default is False).</p> <p>Returns:   - A dictionary containing information about errors and processing time.</p>"},{"location":"theropoda/#4build_id_list","title":"4.<code>build_id_list</code>","text":"<p>Builds and writes a text file containing each Polygon ID used to extract the time series.</p> <p>Parameters:   - <code>asset</code>: Earth Engine vector asset.   - <code>id_field</code>: Field name representing the ID in the vector asset.   - <code>colab_folder</code>: Path of the folder where the text file will be saved.</p>"},{"location":"theropoda/#5run","title":"5.<code>run</code>","text":"<p>Manages the overall workflow by catching argument information and initiating the process of extracting NDVI time series data for specified polygonal areas.</p> <p>Parameters:   - <code>asset</code>: Earth Engine vector asset.   - <code>id_field</code>: Field name representing the ID in the vector asset.   - <code>output_name</code>: Name of the output file.   - <code>colab_folder</code>: Path of the folder where the output file will be saved.</p>"},{"location":"trend_analysis/","title":"Trend Analysis Module","text":"<p>This module includes functionalities for trend analysis.</p>"},{"location":"trend_analysis/#overview","title":"Overview","text":"<p>The <code>trend_analysis</code> module provides functions to analyze trends in time series data.</p>"},{"location":"trend_analysis/#functions","title":"Functions","text":""},{"location":"trend_analysis/#calculate_moving_averagedata-window_size","title":"<code>calculate_moving_average(data, window_size)</code>","text":"<p>Calculates the moving average of a time series.</p>"},{"location":"trend_analysis/#parameters","title":"Parameters","text":"<ul> <li><code>data</code> (list of float): The time series data.</li> <li><code>window_size</code> (int): The window size for the moving average calculation.</li> </ul>"},{"location":"trend_analysis/#returns","title":"Returns","text":"<ul> <li><code>list of float</code>: The time series of moving averages.</li> </ul>"},{"location":"trend_analysis/#example-usage","title":"Example Usage","text":"<pre><code>from trend_analysis import calculate_moving_average\n\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nmoving_average = calculate_moving_average(data, window_size=3)\nprint(moving_average)  # Output: [2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]\n</code></pre>"},{"location":"trend_analysis/#detect_trenddata","title":"<code>detect_trend(data)</code>","text":"<p>Detects the trend in a time series.</p>"},{"location":"trend_analysis/#parameters_1","title":"Parameters","text":"<ul> <li><code>data</code> (list of float): The time series data.</li> </ul>"},{"location":"trend_analysis/#returns_1","title":"Returns","text":"<ul> <li><code>str</code>: The detected trend ('upward', 'downward', 'stable').</li> </ul>"},{"location":"trend_analysis/#example-usage_1","title":"Example Usage","text":"<pre><code>from trend_analysis import detect_trend\n\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntrend = detect_trend(data)\nprint(trend)  # Output: upward\n</code></pre>"},{"location":"trend_analysis/#forecastdata-periods","title":"<code>forecast(data, periods)</code>","text":"<p>Forecasts future values of a time series.</p>"},{"location":"trend_analysis/#parameters_2","title":"Parameters","text":"<ul> <li><code>data</code> (list of float): The time series data.</li> <li><code>periods</code> (int): The number of periods to forecast.</li> </ul>"},{"location":"trend_analysis/#returns_2","title":"Returns","text":"<ul> <li><code>list of float</code>: The forecasted values for the next periods.</li> </ul>"},{"location":"trend_analysis/#example-usage_2","title":"Example Usage","text":"<pre><code>from trend_analysis import forecast\n\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfuture_values = forecast(data, periods=3)\nprint(future_values)  # Output: [11, 12, 13]\n</code></pre>"},{"location":"blog/","title":"Blog","text":""}]}